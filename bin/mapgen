#!/usr/bin/python

import sys, os
import shutil

app_dir = os.path.abspath(__file__ + '/../..')
sys.path.append(os.path.join(app_dir, 'lib'))

from xcsoar.mapgen.generator import Generator
from xcsoar.mapgen.georect import GeoRect
from xcsoar.mapgen.waypoint import WaypointList

def print_help():
    print('''Usage:   mapgen [Options] -wpf waypoint_file output_file
         mapgen [Options] -b left right top bottom output_file

         Options: -r resolution (terrain resolution, arcseconds per pixel)
                  -c, --compress (compress topology data for smaller file size but lower speed)''')

def main():
    args = sys.argv[1:]

    wp = None
    left = None
    output_file = None
    res = 9.0
    compressed = False
    for i in range(len(args)):
        if args[i] == '-r' and i + 1 < len(args):
            res = args[i + 1]
        if args[i] == '-c' or args[i] == '--compress':
            compressed = True
        if args[i] == '-wpf' and i + 2 < len(args):
            wp = args[i + 1]
            output_file = args[i + 2]
        if args[i] == '-b' and i + 5 < len(args):
            left   = args[i + 1]
            right  = args[i + 2]
            top    = args[i + 3]
            bottom = args[i + 4]
            output_file = args[i + 5]

    if (wp == None and left == None) or output_file == None:
        print_help()
        return

    dir_temp = '/tmp/mapgen-{}'.format(os.getpid())
    try:
        generator = Generator(dir_data=os.path.join(app_dir, 'data'),
                              dir_temp=dir_temp)
        if wp:
            generator.add_waypoint_file(wp)
            generator.set_bounds(WaypointList().parse_file(wp).get_bounds())
        if left:
            generator.set_bounds(GeoRect(float(left), float(right), float(top), float(bottom)))
        generator.add_information_file(output_file)
        generator.add_topology(compressed = compressed)
        generator.add_terrain(res)
        generator.create(output_file)
        generator.cleanup()
    finally:
        shutil.rmtree(dir_temp)

if __name__ == '__main__':
    main()
